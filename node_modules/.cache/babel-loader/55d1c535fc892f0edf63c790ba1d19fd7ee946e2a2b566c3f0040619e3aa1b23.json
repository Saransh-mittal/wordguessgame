{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Saransh\\\\Desktop\\\\reactPrac\\\\wordguess\\\\src\\\\Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const words = [\"java\", \"python\", \"react\", \"c++\", \"php\", \"css\", \"html\", \"javascript\", \"ecma\", \"c#\", \"qbasic\"];\n  let [show, setShow] = useState(false);\n  let [buttonWord, setButton] = useState(\"START\");\n  let [randomWord, setRandom] = useState(\"\");\n  let [word, setWord] = useState(\"\");\n  let [head, setHead] = useState(\"Guess the Word: \");\n  const onSubmit = () => {\n    if (buttonWord === \"START\") {\n      setShow(true);\n      setButton(\"GUESS\");\n      setRandom(() => {\n        let i = Math.floor(Math.random() * words.length);\n        let str = words[i].split(\"\");\n        setWord(str.join(\"\"));\n        i = str.length - 1;\n        for (i; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1));\n          let temp = str[i];\n          str[i] = str[j];\n          str[j] = temp;\n        }\n        return str;\n      });\n    } else {\n      if (word === randomWord) {\n        setHead(\"Good\");\n      } else console.log(\"Bad\");\n      setButton(\"START\");\n      setShow(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-emerald-300 h-[85vh] flex justify-center items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-emerald-500 h-[45vh] w-[50%] rounded-md shadow-lg shadow-slate-600/50 flex flex-col justify-center items-center gap-6\",\n        children: [show && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-bold\",\n          children: [head, randomWord]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), show && /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"bg-slate-200 h-12 rounded-3xl outline-0 px-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onSubmit,\n          className: \"bg-white h-12 w-20 text-base font-medium text-red-600\",\n          children: buttonWord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Game, \"TP2veDTR1Ow7im73m+6GibXf77Q=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","words","show","setShow","buttonWord","setButton","randomWord","setRandom","word","setWord","head","setHead","onSubmit","i","Math","floor","random","length","str","split","join","j","temp","console","log","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Saransh/Desktop/reactPrac/wordguess/src/Game.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Game = () => {\r\n  const words = [\r\n    \"java\",\r\n    \"python\",\r\n    \"react\",\r\n    \"c++\",\r\n    \"php\",\r\n    \"css\",\r\n    \"html\",\r\n    \"javascript\",\r\n    \"ecma\",\r\n    \"c#\",\r\n    \"qbasic\",\r\n  ];\r\n  let [show, setShow] = useState(false);\r\n  let [buttonWord, setButton] = useState(\"START\");\r\n  let [randomWord, setRandom] = useState(\"\");\r\n  let [word, setWord] = useState(\"\");\r\n  let [head,setHead] = useState(\"Guess the Word: \")\r\n  const onSubmit = () => {\r\n    if (buttonWord === \"START\") {\r\n      setShow(true);\r\n      setButton(\"GUESS\");\r\n      setRandom(() => {\r\n        let i = Math.floor(Math.random() * words.length);\r\n        let str = words[i].split(\"\");\r\n        setWord(str.join(\"\"));\r\n        i = str.length - 1;\r\n        for (i; i > 0; i--) {\r\n          let j = Math.floor(Math.random() * (i + 1));\r\n          let temp = str[i];\r\n          str[i] = str[j];\r\n          str[j] = temp;\r\n        }\r\n        return str;\r\n      });\r\n    }\r\n    else{\r\n        if(word===randomWord)\r\n        {\r\n            setHead(\"Good\");\r\n        }\r\n        else console.log(\"Bad\");\r\n        setButton(\"START\");\r\n        setShow(false);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"bg-emerald-300 h-[85vh] flex justify-center items-center\">\r\n        <div className=\"bg-emerald-500 h-[45vh] w-[50%] rounded-md shadow-lg shadow-slate-600/50 flex flex-col justify-center items-center gap-6\">\r\n          {show && (\r\n            <h3 className=\"text-xl font-bold\">\r\n               {head}{randomWord}\r\n            </h3>\r\n          )}\r\n          {show && (\r\n            <input className=\"bg-slate-200 h-12 rounded-3xl outline-0 px-5\"></input>\r\n          )}\r\n          <button\r\n            onClick={onSubmit}\r\n            className=\"bg-white h-12 w-20 text-base font-medium text-red-600\"\r\n          >\r\n            {buttonWord}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}