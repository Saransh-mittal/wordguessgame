{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Saransh\\\\Desktop\\\\reactPrac\\\\wordguess\\\\src\\\\Game.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  //   const words = [\n  //     \"java\",\n  //     \"python\",\n  //     \"react\",\n  //     \"c++\",\n  //     \"php\",\n  //     \"css\",\n  //     \"html\",\n  //     \"javascript\",\n  //     \"ecma\",\n  //     \"c#\",\n  //     \"qbasic\",\n  //   ];\n  //   let [show, setShow] = useState(false);\n  //   let [buttonWord, setButton] = useState(\"START\");\n  //   let [randomWord, setRandom] = useState(\"\");\n  //   let [word, setWord] = useState(\"\");\n  //   let [head,setHead] = useState(\"Guess the Word: \");\n  //   let [inputWord,setInput] = useState(\"\");\n  //   const onSubmit = () => {\n  //     if (buttonWord === \"START\") {\n  //       setShow(true);\n  //       setButton(\"GUESS\");\n  //       setRandom(() => {\n  //         let i = Math.floor(Math.random() * words.length);\n  //         let str = words[i].split(\"\");\n  //         setWord(str.join(\"\"));\n  //         i = str.length - 1;\n  //         for (i; i > 0; i--) {\n  //           let j = Math.floor(Math.random() * (i + 1));\n  //           let temp = str[i];\n  //           str[i] = str[j];\n  //           str[j] = temp;\n  //         }\n  //         return str;\n  //       });\n  //     }\n  //     else{\n  //         console.log(word);\n  //         if(word===randomWord)\n  //         {\n  //             setHead(\"Good\");\n  //         }\n  //         else console.log(\"Bad\");\n  //         setButton(\"START\");\n  //         //setShow(false);\n  //     }\n  //   };\n\n  //   const inputEvent = (event.target.value) =>{\n\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-emerald-300 h-[85vh] flex justify-center items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-emerald-500 h-[45vh] w-[50%] rounded-md shadow-lg shadow-slate-600/50 flex flex-col justify-center items-center gap-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-bold\",\n          children: \"hi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"bg-slate-200 h-12 rounded-3xl outline-0 px-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-white h-12 w-20 text-base font-medium text-red-600\",\n          children: \"Hello\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Saransh/Desktop/reactPrac/wordguess/src/Game.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nconst Game = () => {\r\n  //   const words = [\r\n  //     \"java\",\r\n  //     \"python\",\r\n  //     \"react\",\r\n  //     \"c++\",\r\n  //     \"php\",\r\n  //     \"css\",\r\n  //     \"html\",\r\n  //     \"javascript\",\r\n  //     \"ecma\",\r\n  //     \"c#\",\r\n  //     \"qbasic\",\r\n  //   ];\r\n  //   let [show, setShow] = useState(false);\r\n  //   let [buttonWord, setButton] = useState(\"START\");\r\n  //   let [randomWord, setRandom] = useState(\"\");\r\n  //   let [word, setWord] = useState(\"\");\r\n  //   let [head,setHead] = useState(\"Guess the Word: \");\r\n  //   let [inputWord,setInput] = useState(\"\");\r\n  //   const onSubmit = () => {\r\n  //     if (buttonWord === \"START\") {\r\n  //       setShow(true);\r\n  //       setButton(\"GUESS\");\r\n  //       setRandom(() => {\r\n  //         let i = Math.floor(Math.random() * words.length);\r\n  //         let str = words[i].split(\"\");\r\n  //         setWord(str.join(\"\"));\r\n  //         i = str.length - 1;\r\n  //         for (i; i > 0; i--) {\r\n  //           let j = Math.floor(Math.random() * (i + 1));\r\n  //           let temp = str[i];\r\n  //           str[i] = str[j];\r\n  //           str[j] = temp;\r\n  //         }\r\n  //         return str;\r\n  //       });\r\n  //     }\r\n  //     else{\r\n  //         console.log(word);\r\n  //         if(word===randomWord)\r\n  //         {\r\n  //             setHead(\"Good\");\r\n  //         }\r\n  //         else console.log(\"Bad\");\r\n  //         setButton(\"START\");\r\n  //         //setShow(false);\r\n  //     }\r\n  //   };\r\n\r\n  //   const inputEvent = (event.target.value) =>{\r\n\r\n  //   };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"bg-emerald-300 h-[85vh] flex justify-center items-center\">\r\n        <div className=\"bg-emerald-500 h-[45vh] w-[50%] rounded-md shadow-lg shadow-slate-600/50 flex flex-col justify-center items-center gap-6\">\r\n            <h3 className=\"text-xl font-bold\">\r\n              hi\r\n            </h3>\r\n          \r\n            <input className=\"bg-slate-200 h-12 rounded-3xl outline-0 px-5\"></input>\r\n          <button className=\"bg-white h-12 w-20 text-base font-medium text-red-600\">\r\n          Hello\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,IAAI,GAAGA,CAAA,KAAM;EACjB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA,oBACEH,OAAA,CAAAE,SAAA;IAAAE,QAAA,eACEJ,OAAA;MAAKK,SAAS,EAAC,0DAA0D;MAAAD,QAAA,eACvEJ,OAAA;QAAKK,SAAS,EAAC,0HAA0H;QAAAD,QAAA,gBACrIJ,OAAA;UAAIK,SAAS,EAAC,mBAAmB;UAAAD,QAAA,EAAC;QAElC;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAK,eAELT,OAAA;UAAOK,SAAS,EAAC;QAA8C;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS,eAC1ET,OAAA;UAAQK,SAAS,EAAC,uDAAuD;UAAAD,QAAA,EAAC;QAE1E;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACL;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACF,iBACL;AAEP,CAAC;AAACC,EAAA,GAtEIP,IAAI;AAwEV,eAAeA,IAAI;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}